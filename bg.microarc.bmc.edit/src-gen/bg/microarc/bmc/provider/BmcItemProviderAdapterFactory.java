/**
 */
package bg.microarc.bmc.provider;

import bg.microarc.bmc.util.BmcAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BmcItemProviderAdapterFactory extends BmcAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BmcItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link bg.microarc.bmc.BMCModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BMCModelItemProvider bmcModelItemProvider;

	/**
	 * This creates an adapter for a {@link bg.microarc.bmc.BMCModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBMCModelAdapter() {
		if (bmcModelItemProvider == null) {
			bmcModelItemProvider = new BMCModelItemProvider(this);
		}

		return bmcModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bg.microarc.bmc.KeyActivities} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyActivitiesItemProvider keyActivitiesItemProvider;

	/**
	 * This creates an adapter for a {@link bg.microarc.bmc.KeyActivities}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyActivitiesAdapter() {
		if (keyActivitiesItemProvider == null) {
			keyActivitiesItemProvider = new KeyActivitiesItemProvider(this);
		}

		return keyActivitiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bg.microarc.bmc.KeyPartners} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyPartnersItemProvider keyPartnersItemProvider;

	/**
	 * This creates an adapter for a {@link bg.microarc.bmc.KeyPartners}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyPartnersAdapter() {
		if (keyPartnersItemProvider == null) {
			keyPartnersItemProvider = new KeyPartnersItemProvider(this);
		}

		return keyPartnersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bg.microarc.bmc.KeyResources} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyResourcesItemProvider keyResourcesItemProvider;

	/**
	 * This creates an adapter for a {@link bg.microarc.bmc.KeyResources}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyResourcesAdapter() {
		if (keyResourcesItemProvider == null) {
			keyResourcesItemProvider = new KeyResourcesItemProvider(this);
		}

		return keyResourcesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bg.microarc.bmc.CustomerSegments} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomerSegmentsItemProvider customerSegmentsItemProvider;

	/**
	 * This creates an adapter for a {@link bg.microarc.bmc.CustomerSegments}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomerSegmentsAdapter() {
		if (customerSegmentsItemProvider == null) {
			customerSegmentsItemProvider = new CustomerSegmentsItemProvider(this);
		}

		return customerSegmentsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bg.microarc.bmc.CustomerRelationships} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomerRelationshipsItemProvider customerRelationshipsItemProvider;

	/**
	 * This creates an adapter for a {@link bg.microarc.bmc.CustomerRelationships}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomerRelationshipsAdapter() {
		if (customerRelationshipsItemProvider == null) {
			customerRelationshipsItemProvider = new CustomerRelationshipsItemProvider(this);
		}

		return customerRelationshipsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bg.microarc.bmc.Channels} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChannelsItemProvider channelsItemProvider;

	/**
	 * This creates an adapter for a {@link bg.microarc.bmc.Channels}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChannelsAdapter() {
		if (channelsItemProvider == null) {
			channelsItemProvider = new ChannelsItemProvider(this);
		}

		return channelsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bg.microarc.bmc.ValueProposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValuePropositionItemProvider valuePropositionItemProvider;

	/**
	 * This creates an adapter for a {@link bg.microarc.bmc.ValueProposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValuePropositionAdapter() {
		if (valuePropositionItemProvider == null) {
			valuePropositionItemProvider = new ValuePropositionItemProvider(this);
		}

		return valuePropositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bg.microarc.bmc.CostStructure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CostStructureItemProvider costStructureItemProvider;

	/**
	 * This creates an adapter for a {@link bg.microarc.bmc.CostStructure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCostStructureAdapter() {
		if (costStructureItemProvider == null) {
			costStructureItemProvider = new CostStructureItemProvider(this);
		}

		return costStructureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bg.microarc.bmc.RevenueStreams} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RevenueStreamsItemProvider revenueStreamsItemProvider;

	/**
	 * This creates an adapter for a {@link bg.microarc.bmc.RevenueStreams}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRevenueStreamsAdapter() {
		if (revenueStreamsItemProvider == null) {
			revenueStreamsItemProvider = new RevenueStreamsItemProvider(this);
		}

		return revenueStreamsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bg.microarc.bmc.BMC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BMCItemProvider bmcItemProvider;

	/**
	 * This creates an adapter for a {@link bg.microarc.bmc.BMC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBMCAdapter() {
		if (bmcItemProvider == null) {
			bmcItemProvider = new BMCItemProvider(this);
		}

		return bmcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link bg.microarc.bmc.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link bg.microarc.bmc.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (bmcModelItemProvider != null)
			bmcModelItemProvider.dispose();
		if (keyActivitiesItemProvider != null)
			keyActivitiesItemProvider.dispose();
		if (keyPartnersItemProvider != null)
			keyPartnersItemProvider.dispose();
		if (keyResourcesItemProvider != null)
			keyResourcesItemProvider.dispose();
		if (customerSegmentsItemProvider != null)
			customerSegmentsItemProvider.dispose();
		if (customerRelationshipsItemProvider != null)
			customerRelationshipsItemProvider.dispose();
		if (channelsItemProvider != null)
			channelsItemProvider.dispose();
		if (valuePropositionItemProvider != null)
			valuePropositionItemProvider.dispose();
		if (costStructureItemProvider != null)
			costStructureItemProvider.dispose();
		if (revenueStreamsItemProvider != null)
			revenueStreamsItemProvider.dispose();
		if (bmcItemProvider != null)
			bmcItemProvider.dispose();
		if (eventItemProvider != null)
			eventItemProvider.dispose();
	}

}
